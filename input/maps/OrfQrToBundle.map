map "http://fhir.ch/ig/ch-orf/StructureMap/OrfQrToBundle" = "OrfQrToBundle"

//
// ORF Questionnaire Response to Bundle
// 2021-01-11 Oliver Egger, copyright ahdis ag, Apache License 
// QRF Questionnaire: http://build.fhir.org/ig/ehealthsuisse/ch-orf/Questionnaire-referral-min.html
// QRF Questionnaire Response: http://build.fhir.org/ig/ehealthsuisse/ch-orf/QuestionnaireResponse-referral-min.xml.html
// Bundle: http://build.fhir.org/ig/ehealthsuisse/ch-orf/StructureDefinition-ch-orf-document.html

uses "http://hl7.org/fhir/StructureDefinition/QuestionnaireResponse" alias QuestionnaireResponse as source
uses "http://hl7.org/fhir/StructureDefinition/Bundle" alias Bundle as target
uses "http://hl7.org/fhir/StructureDefinition/Patient" alias Patient as target
uses "http://hl7.org/fhir/StructureDefinition/Organization" alias Organization as target
uses "http://hl7.org/fhir/StructureDefinition/Practitioner" alias Practitioner as target
uses "http://hl7.org/fhir/StructureDefinition/PractitionerRole" alias PractitionerRole as target
uses "http://hl7.org/fhir/StructureDefinition/ServiceRequest" alias ServiceRequest as target
uses "http://hl7.org/fhir/StructureDefinition/BackboneElement" alias BackboneElement as target

group OrfQrToBundle(source qr : QuestionnaireResponse, target bundle : Bundle ) {
      qr -> bundle.identifier as documentIdentifier, documentIdentifier.system = 'urn:ietf:rfc:3986',  uuid() as uuidDoc, documentIdentifier.value = append('urn:uuid:', uuidDoc) "documentIdentifier";
      qr -> bundle.timestamp = (now()) "assembling time";
      qr as qrcp -> bundle.entry as e, 
             e.resource = create('Composition') as composition, 
             composition.id = uuid() as uuid,
             e.fullUrl = append('urn:uuid:',uuid),
             bundle.entry as e2, 
             e2.resource = create('Patient') as patient,
             patient.id = uuid() as uuid2,
             e2.fullUrl = append('urn:uuid:',uuid2),
             bundle.entry as e4, 
             e4.resource = qrcp as questionnaireresp,
             questionnaireresp.id = uuid() as uuid4,
             e4.fullUrl = append('urn:uuid:',uuid4),
             bundle.entry as e5, 
             e5.resource = create('ServiceRequest') as servicerequest, 
             servicerequest.id = uuid() as uuid5,
             e5.fullUrl = append('urn:uuid:',uuid5) then {
               qr then QrToBundle(qr, patient, questionnaireresp, servicerequest, composition, bundle) "orfbundle";
             } "orfbundle";
}

group QrToGroups(source qr : QuestionnaireResponse, target patient : Patient, target bundle: Bundle, target composition : Composition, target serviceRequest: ServiceRequest) {
    qr.item as grp where linkId='order' then OrderItems(grp, bundle, composition, serviceRequest) "grporder";
    qr.item as grp where linkId='receiverRequest' then ReceiverRequestInit(grp, bundle, composition, serviceRequest) "receiverRequest";
    qr.item as grp where linkId='patient' then PatientItems(grp, patient) "grppatient";
    qr.item as grp where linkId='orderer' then OrdererAuthorInit(grp, bundle, composition, serviceRequest) "grporderer";
    qr.item as grp where linkId='receiverResponses' then ReceiverResponse(grp, bundle, composition, serviceRequest) "grporderer";
}

group OrderItems(source src : BackboneElement, target bundle: Bundle, target composition, target serviceRequest : ServiceRequest) {
  src.item as item where (linkId.value = 'order.precedentDocumentIdentifier' and answer.exists())   -> composition.extension as ext, ext.url = 'http://fhir.ch/ig/ch-orf/StructureDefinition/ch-orf-precedentdocument',
                                                                        ext.value = create('Identifier') as value, value.value=(item.answer.valueString) "order.precedentDocumentIdentifier"; 

  src.item as item where (linkId.value = 'order.placerOrderIdentifier' and answer.exists()) -> serviceRequest.identifier as value share placer, 
                                                                                   value.type as type, type.coding as coding,
                                                                                   coding.system = 'http://terminology.hl7.org/CodeSystem/v2-0203',
                                                                                   coding.code = 'PLAC',
                                                                                   value.value=(item.answer.valueString) "order.placerOrderIdentifier"; 
  src.item as item where (linkId.value = 'order.placerOrderIdentifierDomain' and answer.exists()) -> serviceRequest.identifier as value share placer, 
                                                                                   value.system=(item.answer.valueString) "order.placerOrderIdentifierDomain"; 
  src.item as item where (linkId.value = 'order.fillerOrderIdentifier' and answer.exists()) -> serviceRequest.identifier as value share filler, 
                                                                                   value.type as type, type.coding as coding,
                                                                                   coding.system = 'http://terminology.hl7.org/CodeSystem/v2-0203',
                                                                                   coding.code = 'FILL',
                                                                                   value.value=(item.answer.valueString) "order.fillerOrderIdentifier"; 
  src.item as item where (linkId.value = 'order.fillerOrderIdentifierDomain' and answer.exists()) -> serviceRequest.identifier as value share filler, 
                                                                                   value.system=(item.answer.valueString) "order.fillerOrderIdentifierDomain"; 

  src.item as item where (linkId.value = 'order.dateTime' and answer.exists()) -> serviceRequest.authoredOn = (item.answer.value);

  src.item as item where (linkId.value = 'order.priority' and answer.exists()) -> serviceRequest.priority = (item.answer.value.code);

  src.item as item where (linkId.value = 'order.notificationContactDocument') then {
      item -> bundle.entry as e4, 
               e4.resource = create('PractitionerRole') as practitionerRoleDataEnterer, 
               practitionerRoleDataEnterer.id = uuid() as uuid4,
               e4.fullUrl = append('urn:uuid:',uuid4),
               composition.extension as extension,
               bundle.entry as e5, 
               e5.resource = create('Practitioner') as practitionerDataEnterer, 
               practitionerDataEnterer.id = uuid() as uuid5,
               e5.fullUrl = append('urn:uuid:',uuid5),
               practitionerRoleDataEnterer.practitioner = create('Reference') as reference, reference.type='Practitioner', reference.reference = append('urn:uuid:',uuid5)
//   ,
// FIXME not known here               practitionerRoleDataEnterer.organization = create('Reference') as reference, reference.type='Organization', reference.reference = append('urn:uuid:',uuid3) 
               then {
                     item then UrgentNotificationContactForRequestItems(item, practitionerRoleDataEnterer, practitionerDataEnterer) "data";
                     item then ExtOrfUrgentNotificationContactForRequest(item, practitionerRoleDataEnterer, extension) "extension";
                  } "order.notificationContactDocument.items";
      } "order.notificationContactDocument";
   
   src.item as item where (linkId.value = 'order.notificationContactDocumentResponse') then {
      item -> bundle.entry as e4, 
               e4.resource = create('PractitionerRole') as practitionerRoleDataEnterer, 
               practitionerRoleDataEnterer.id = uuid() as uuid4,
               e4.fullUrl = append('urn:uuid:',uuid4),
               composition.extension as extension,
               bundle.entry as e5, 
               e5.resource = create('Practitioner') as practitionerDataEnterer, 
               practitionerDataEnterer.id = uuid() as uuid5,
               e5.fullUrl = append('urn:uuid:',uuid5),
               practitionerRoleDataEnterer.practitioner = create('Reference') as reference, reference.type='Practitioner', reference.reference = append('urn:uuid:',uuid5)
// ,
// FIXME not known here practitionerRoleDataEnterer.organization = create('Reference') as reference, reference.type='Organization', reference.reference = append('urn:uuid:',uuid3) 
               then {
                     item then UrgentNotificationContactForResponseItems(item, practitionerRoleDataEnterer, practitionerDataEnterer) "data";
                     item then ExtOrfUrgentNotificationContactForResponse(item, practitionerRoleDataEnterer, extension) "extension";
                  } "order.notificationContactDocumentResponse.items";
      } "order.notificationContactDocumentResponse";
}

group UrgentNotificationContactForRequestPractitionerItems(source src : BackboneElement, target practitioner: Practitioner) {
   src.item as item where (linkId.value = 'order.notificationContactDocument.practitioner.familyName' and answer.exists()) -> practitioner.name as name share practitionerName, name.family = (item.answer.value);
   src.item as item where (linkId.value = 'order.notificationContactDocument.practitioner.givenName' and answer.exists()) -> practitioner.name as name share practitionerName, name.given = (item.answer.value);
   src.item as item where (linkId.value = 'order.notificationContactDocument.practitioner.title' and answer.exists()) -> practitioner.name as name share practitionerName, 
                                                                        name.prefix = (item.answer.value) as prefix,
                                                                        prefix.extension as ext, ext.url = 'http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier',
                                                                        ext.value = create('code') as value, value.value='AC' "orderer.author.practitioner.title"; 
     src.item as item where (linkId.value = 'order.notificationContactDocument.practitioner.phone' and answer.exists()) -> practitioner.telecom as value, 
                                                                                   value.system = 'phone',
                                                                                   value.value=(item.answer.value) "orderer.author.practitioner.phone"; 
   src.item as item where (linkId.value = 'order.notificationContactDocument.practitioner.email' and answer.exists()) -> practitioner.telecom as value, 
                                                                                   value.system = 'email',
                                                                                   value.value=(item.answer.value) "orderer.author.practitioner.email"; 
}

group UrgentNotificationContactForRequestItems(source src : BackboneElement, target practitionerRole: practitionerRole, target practitioner : Practitioner) {
   src.item as item where (linkId.value = 'order.notificationContactDocument.practitioner') then UrgentNotificationContactForRequestPractitionerItems(item, practitioner);
}

group ExtOrfUrgentNotificationContactForRequest(source src: BackboneElement, target practitionerRole: PractitionerRole, target ext: Extension) {
  src -> ext.url = 'http://fhir.ch/ig/ch-orf/StructureDefinition/ch-orf-urgentnoficationcontactforthisdocument' "url";
  src -> ext.value = create('Reference') as reference, 
                reference.type='PractitionerRole', reference.reference = ('urn:uuid:'+%practitionerRole.id) "practitionerRole";
}

group UrgentNotificationContactForResponsePractitionerItems(source src : BackboneElement, target practitioner: Practitioner) {
   src.item as item where (linkId.value = 'order.notificationContactDocumentResponse.practitioner.familyName' and answer.exists()) -> practitioner.name as name share practitionerName, name.family = (item.answer.value);
   src.item as item where (linkId.value = 'order.notificationContactDocumentResponse.practitioner.givenName' and answer.exists()) -> practitioner.name as name share practitionerName, name.given = (item.answer.value);
   src.item as item where (linkId.value = 'order.notificationContactDocumentResponse.practitioner.title' and answer.exists()) -> practitioner.name as name share practitionerName, 
                                                                        name.prefix = (item.answer.value) as prefix,
                                                                        prefix.extension as ext, ext.url = 'http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier',
                                                                        ext.value = create('code') as value, value.value='AC' "orderer.author.practitioner.title"; 
     src.item as item where (linkId.value = 'order.notificationContactDocumentResponse.practitioner.phone' and answer.exists()) -> practitioner.telecom as value, 
                                                                                   value.system = 'phone',
                                                                                   value.value=(item.answer.value) "orderer.author.practitioner.phone"; 
   src.item as item where (linkId.value = 'order.notificationContactDocumentResponse.practitioner.email' and answer.exists()) -> practitioner.telecom as value, 
                                                                                   value.system = 'email',
                                                                                   value.value=(item.answer.value) "orderer.author.practitioner.email"; 
}

group UrgentNotificationContactForResponseItems(source src : BackboneElement, target practitionerRole: practitionerRole, target practitioner : Practitioner) {
   src.item as item where (linkId.value = 'order.notificationContactDocumentResponse.practitioner') then UrgentNotificationContactForResponsePractitionerItems(item, practitioner);
}

group ExtOrfUrgentNotificationContactForResponse(source src: BackboneElement, target practitionerRole: PractitionerRole, target ext: Extension) {
  src -> ext.url = 'http://fhir.ch/ig/ch-orf/StructureDefinition/ch-orf-urgentnoficationcontactfortheresponsetothisdocument' "url";
  src -> ext.value = create('Reference') as reference, 
                reference.type='PractitionerRole', reference.reference = ('urn:uuid:'+%practitionerRole.id) "practitionerRole";
}


group ReceiverRequestPractitionerItems(source src : BackboneElement, target practitioner : Practitioner) {
   src.item as item where (linkId.value = 'receiverRequest.practitioner.familyName' and answer.exists()) -> practitioner.name as name share practitionerName, name.family = (item.answer.value);
   src.item as item where (linkId.value = 'receiverRequest.practitioner.givenName' and answer.exists()) -> practitioner.name as name share practitionerName, name.given = (item.answer.value);
   src.item as item where (linkId.value = 'receiverRequest.practitioner.title' and answer.exists()) -> practitioner.name as name share practitionerName, 
                                                                        name.prefix = (item.answer.value) as prefix,
                                                                        prefix.extension as ext, ext.url = 'http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier',
                                                                        ext.value = create('code') as value, value.value='AC' "receiverRequest.practitioner.title"; 
   src.item as item where (linkId.value = 'receiverRequest.practitioner.gln' and answer.exists()) -> practitioner.identifier as value, 
                                                                                   value.system = 'urn:oid:2.51.1.3',
                                                                                   value.value=(item.answer.value) "receiverRequest.practitioner.gln"; 
   src.item as item where (linkId.value = 'receiverRequest.practitioner.phone' and answer.exists()) -> practitioner.telecom as value, 
                                                                                   value.system = 'phone',
                                                                                   value.value=(item.answer.value) "receiverRequest.practitioner.phone"; 
   src.item as item where (linkId.value = 'receiverRequest.practitioner.email' and answer.exists()) -> practitioner.telecom as value, 
                                                                                   value.system = 'email',
                                                                                   value.value=(item.answer.value) "receiverRequest.practitioner.email"; 
}

group ReceiverRequestOrganizationItems(source src : BackboneElement, target organization : Organization) {
   src.item as item where (linkId.value = 'receiverRequest.organization.name' and answer.exists()) -> organization.name = (item.answer.value);
   src.item as item where (linkId.value = 'receiverRequest.organization.streetAddressLine' and answer.exists()) -> organization.address as address share orgAddress then {
     item.answer as answer -> address.line = (answer.value) "receiverRequest.organization.streetAddressLine";
   } "item.answer";
   src.item as item where (linkId.value = 'receiverRequest.organization.postalCode' and answer.exists()) -> organization.address as address share orgAddress, address.postalCode = (item.answer.value) "receiverRequest.organization.postalCode";
   src.item as item where (linkId.value = 'receiverRequest.organization.city' and answer.exists()) -> organization.address as address share orgAddress, address.city = (item.answer.value) "receiverRequest.organization.city";
   src.item as item where (linkId.value = 'receiverRequest.organization.country' and answer.exists()) -> organization.address as address share orgAddress, address.country = (item.answer.value) "receiverRequest.organization.country";
}

group ReceiverRequestItems(source src : BackboneElement, target practitionerRole: practitionerRole, target practitioner : Practitioner, target organization: Organization) {
   src.item as item where (linkId.value = 'receiverRequest.practitioner') then ReceiverRequestPractitionerItems(item, practitioner);
   src.item as item where (linkId.value = 'receiverRequest.organization') then ReceiverRequestOrganizationItems(item, organization);
}

group ReceiverRequestInit(source src : BackboneElement, target bundle: Bundle, target composition : Composition, target serviceRequest: ServiceRequest) {
   src -> bundle.entry as e, 
          e.resource = create('PractitionerRole') as practitionerRole, 
          practitionerRole.id = uuid() as uuid,
          e.fullUrl = append('urn:uuid:',uuid),
          bundle.entry as e2, 
          e2.resource = create('Practitioner') as practitioner, 
          practitioner.id = uuid() as uuid2,
          e2.fullUrl = append('urn:uuid:',uuid2),
          bundle.entry as e3, 
          e3.resource = create('Organization') as organization, 
          organization.id = uuid() as uuid3,
          e3.fullUrl = append('urn:uuid:',uuid3),
          serviceRequest.performer = create('Reference') as reference, reference.type='PractitionerRole', reference.reference = append('urn:uuid:',uuid),
          practitionerRole.practitioner = create('Reference') as reference, reference.type='Practitioner', reference.reference = append('urn:uuid:',uuid2),
          practitionerRole.organization = create('Reference') as reference, reference.type='Organization', reference.reference = append('urn:uuid:',uuid3) then
          ReceiverRequestItems(src, practitionerRole, practitioner, organization) "receiverRequest";
}

group PatientItems(source src : BackboneElement, target tgt:Patient) {
  src.item as item then PatientItems(item, tgt);
  src.item as item where (linkId.value = 'patient.familyName' and answer.exists()) -> tgt.name as name share patientName, name.family = (item.answer.value);
  src.item as item where (linkId.value = 'patient.givenName' and answer.exists()) -> tgt.name as name share patientName, name.given = (item.answer.value);
  src.item as item where (linkId.value = 'patient.localPid' and answer.exists()) -> tgt.identifier as value, 
                                                                                   value.type as type, type.coding as coding,
                                                                                   coding.system = 'http://terminology.hl7.org/CodeSystem/v2-0203',
                                                                                   coding.code = 'MR',
                                                                                   value.value=(item.answer.valueString) "patient.localPid";
  src.item as item where (linkId.value = 'patient.birthDate' and answer.exists()) -> tgt.birthDate = (item.answer.value);
  src.item as item where (linkId.value = 'patient.gender' and answer.exists()) -> tgt.gender = (item.answer.value.code);
  src.item as item where (linkId.value = 'patient.phone' and answer.exists()) -> tgt.telecom as value, 
                                                                                   value.system = 'phone',
                                                                                   value.value=(item.answer.value) "patient.phone"; 
  src.item as item where (linkId.value = 'patient.email' and answer.exists()) -> tgt.telecom as value, 
                                                                                   value.system = 'email',
                                                                                   value.value=(item.answer.value) "patient.email"; 
  src.item as item where (linkId.value = 'patient.streetAddressLine' and answer.exists()) -> tgt.address as address share orgAddress then {
     item.answer as answer -> address.line = (answer.value) "patient.streetAddressLine";
  } "item.answer";
  src.item as item where (linkId.value = 'patient.postalCode' and answer.exists()) -> tgt.address as address share orgAddress, address.postalCode = (item.answer.value) "patient.postalCode";
  src.item as item where (linkId.value = 'patient.city' and answer.exists()) -> tgt.address as address share orgAddress, address.city = (item.answer.value) "patient.city";
  src.item as item where (linkId.value = 'patient.country' and answer.exists()) -> tgt.address as address share orgAddress, address.country = (item.answer.value) "patient.country";
}

group OrdererAuthorPractitionerItems(source src : BackboneElement, target practitioner: Practitioner) {
   src.item as item where (linkId.value = 'orderer.author.practitioner.familyName' and answer.exists()) -> practitioner.name as name share practitionerName, name.family = (item.answer.value);
   src.item as item where (linkId.value = 'orderer.author.practitioner.givenName' and answer.exists()) -> practitioner.name as name share practitionerName, name.given = (item.answer.value);
   src.item as item where (linkId.value = 'orderer.author.practitioner.title' and answer.exists()) -> practitioner.name as name share practitionerName, 
                                                                        name.prefix = (item.answer.value) as prefix,
                                                                        prefix.extension as ext, ext.url = 'http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier',
                                                                        ext.value = create('code') as value, value.value='AC' "orderer.author.practitioner.title"; 
   src.item as item where (linkId.value = 'orderer.author.practitioner.gln' and answer.exists()) -> practitioner.identifier as value, 
                                                                                   value.system = 'urn:oid:2.51.1.3',
                                                                                   value.value=(item.answer.value) "orderer.author.practitioner.gln"; 
   src.item as item where (linkId.value = 'orderer.author.practitioner.phone' and answer.exists()) -> practitioner.telecom as value, 
                                                                                   value.system = 'phone',
                                                                                   value.value=(item.answer.value) "orderer.author.practitioner.phone"; 
   src.item as item where (linkId.value = 'orderer.author.practitioner.email' and answer.exists()) -> practitioner.telecom as value, 
                                                                                   value.system = 'email',
                                                                                   value.value=(item.answer.value) "orderer.author.practitioner.email"; 
}

group OrdererAuthorOrganizationItems(source src : BackboneElement, target organization: Organization) {
   src.item as item where (linkId.value = 'orderer.author.organization.name' and answer.exists()) -> organization.name = (item.answer.value);
   src.item as item where (linkId.value = 'orderer.author.organization.streetAddressLine' and answer.exists()) -> organization.address as address share orgAddress then {
     item.answer as answer -> address.line = (answer.value) "orderer.author.organization.streetAddressLine";
   } "item.answer";
   src.item as item where (linkId.value = 'orderer.author.organization.postalCode' and answer.exists()) -> organization.address as address share orgAddress, address.postalCode = (item.answer.value) "orderer.author.organization.postalCode";
   src.item as item where (linkId.value = 'orderer.author.organization.city' and answer.exists()) -> organization.address as address share orgAddress, address.city = (item.answer.value) "orderer.author.organization.city";
   src.item as item where (linkId.value = 'orderer.author.organization.country' and answer.exists()) -> organization.address as address share orgAddress, address.country = (item.answer.value) "orderer.author.organization.country";
}

group OrdererAuthorItems(source src : BackboneElement, target practitionerRole: practitionerRole, target practitioner : Practitioner, target organization: Organization) {
   src.item as item where (linkId.value = 'orderer.author.practitioner') then OrdererAuthorPractitionerItems(item, practitioner);
   src.item as item where (linkId.value = 'orderer.author.organization') then OrdererAuthorOrganizationItems(item, organization);
}

group OrdererDataEntererPractitionerItems(source src : BackboneElement, target practitioner: Practitioner) {
   src.item as item where (linkId.value = 'orderer.dataenterer.practitioner.familyName' and answer.exists()) -> practitioner.name as name share practitionerName, name.family = (item.answer.value);
   src.item as item where (linkId.value = 'orderer.dataenterer.practitioner.givenName' and answer.exists()) -> practitioner.name as name share practitionerName, name.given = (item.answer.value);
   src.item as item where (linkId.value = 'orderer.dataenterer.practitioner.phone' and answer.exists()) -> practitioner.telecom as value, 
                                                                                   value.system = 'phone',
                                                                                   value.value=(item.answer.value) "orderer.author.practitioner.phone"; 
   src.item as item where (linkId.value = 'orderer.dataenterer.practitioner.email' and answer.exists()) -> practitioner.telecom as value, 
                                                                                   value.system = 'email',
                                                                                   value.value=(item.answer.value) "orderer.author.practitioner.email"; 
}

group OrdererDataEntererItems(source src : BackboneElement, target practitionerRole: practitionerRole, target practitioner : Practitioner, target organization: Organization) {
   src.item as item where (linkId.value = 'orderer.dataenterer.practitioner') then OrdererDataEntererPractitionerItems(item, practitioner);
}

group ChExtEprDataEnterer(source src: BackboneElement, target practitionerRole: PractitionerRole, target ext: Extension) {
  src -> ext.url = 'http://fhir.ch/ig/ch-core/StructureDefinition/ch-ext-epr-dataenterer' "url";
  src -> ext.extension as ext, ext.url='enterer', ext.value = create('Reference') as reference, 
                reference.type='PractitionerRole', reference.reference = ('urn:uuid:'+%practitionerRole.id) "practitionerRole";
}

group OrdererAuthorInit(source src : BackboneElement, target bundle: Bundle, target composition : Composition, target serviceRequest: ServiceRequest) {
   src -> bundle.entry as e, 
          e.resource = create('PractitionerRole') as practitionerRole, 
          practitionerRole.id = uuid() as uuid,
          e.fullUrl = append('urn:uuid:',uuid),
          bundle.entry as e2, 
          e2.resource = create('Practitioner') as practitioner, 
          practitioner.id = uuid() as uuid2,
          e2.fullUrl = append('urn:uuid:',uuid2),
          bundle.entry as e3, 
          e3.resource = create('Organization') as organization, 
          organization.id = uuid() as uuid3,
          e3.fullUrl = append('urn:uuid:',uuid3),
          composition.author = create('Reference') as reference, reference.type='PractitionerRole', reference.reference = append('urn:uuid:',uuid),
          serviceRequest.requester = create('Reference') as reference, reference.type='PractitionerRole', reference.reference = append('urn:uuid:',uuid),
          practitionerRole.practitioner = create('Reference') as reference, reference.type='Practitioner', reference.reference = append('urn:uuid:',uuid2),
          practitionerRole.organization = create('Reference') as reference, reference.type='Organization', reference.reference = append('urn:uuid:',uuid3) then {
             src.item as item where (linkId.value = 'orderer.author') then OrdererAuthorItems(item, practitionerRole, practitioner, organization) "orderer.author";
             src.item as item where (linkId.value = 'orderer.dataenterer') then {
               item -> bundle.entry as e4, 
                      e4.resource = create('PractitionerRole') as practitionerRoleDataEnterer, 
                      practitionerRoleDataEnterer.id = uuid() as uuid4,
                      e4.fullUrl = append('urn:uuid:',uuid4),
                      composition.extension as extension,
                      bundle.entry as e5, 
                      e5.resource = create('Practitioner') as practitionerDataEnterer, 
                      practitionerDataEnterer.id = uuid() as uuid5,
                      e5.fullUrl = append('urn:uuid:',uuid5),
                      practitionerRoleDataEnterer.practitioner = create('Reference') as reference, reference.type='Practitioner', reference.reference = append('urn:uuid:',uuid5),
                      practitionerRoleDataEnterer.organization = create('Reference') as reference, reference.type='Organization', reference.reference = append('urn:uuid:',uuid3) 
                      then {
                            item then OrdererDataEntererItems(item, practitionerRoleDataEnterer, practitionerDataEnterer, organization) "data";
                            item then ChExtEprDataEnterer(item, practitionerRoleDataEnterer, extension) "extension";
                         } "orderer.dataenterer.items";
             } "orderer.dataenterer";
          } "orderer";
}

group ResponseReceiverPatientItems(source src : BackboneElement, target patient: Patient) {
   src.item as item where (linkId.value = 'receiverResponse.familyName' and answer.exists()) -> patient.name as name share name, name.family = (item.answer.value);
   src.item as item where (linkId.value = 'receiverResponse.givenName' and answer.exists()) -> patient.name as name share name, name.given = (item.answer.value);
   src.item as item where (linkId.value = 'receiverResponse.title' and answer.exists()) -> patient.name as name share name, 
                                                                        name.prefix = (item.answer.value) as prefix,
                                                                        prefix.extension as ext, ext.url = 'http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier',
                                                                        ext.value = create('code') as value, value.value='AC' "receiverResponse.title"; 
   src.item as item where (linkId.value = 'receiverResponse.phone' and answer.exists()) -> patient.telecom as value, 
                                                                                   value.system = 'phone',
                                                                                   value.value=(item.answer.value) "receiverResponse.phone"; 
   src.item as item where (linkId.value = 'receiverResponse.email' and answer.exists()) -> patient.telecom as value, 
                                                                                   value.system = 'email',
                                                                                   value.value=(item.answer.value) "receiverResponse.email"; 
   src.item as item where (linkId.value = 'receiverResponse.streetAddressLine' and answer.exists()) -> patient.address as address share orgAddress then {
     item.answer as answer -> address.line = (answer.value) "receiverResponse.streetAddressLine";
   } "item.answer";
   src.item as item where (linkId.value = 'receiverResponse.postalCode' and answer.exists()) -> patient.address as address share orgAddress, address.postalCode = (item.answer.value) "receiverResponse.postalCode";
   src.item as item where (linkId.value = 'receiverResponse.city' and answer.exists()) -> patient.address as address share orgAddress, address.city = (item.answer.value) "receiverResponse.city";
   src.item as item where (linkId.value = 'receiverResponse.country' and answer.exists()) -> patient.address as address share orgAddress, address.country = (item.answer.value) "receiverResponse.country";
}

group ExtOrfResponseReceiverPatient(source src: BackboneElement, target patient: Patient, target ext: Extension) {
  src -> ext.url = 'http://fhir.ch/ig/ch-orf/StructureDefinition/ch-orf-responsereceiver' "url";
  src -> ext.value = create('Reference') as reference, 
                reference.type='Patient', reference.reference = ('urn:uuid:'+%patient.id) "patient";
}

group ResponseReceiverOrganizationItems(source src : BackboneElement, target organization: Organization) {
   src.item as item where (linkId.value = 'receiverResponse.organization.name' and answer.exists()) -> organization.name = (item.answer.value);
   src.item as item where (linkId.value = 'receiverResponse.familyName' and answer.exists()) -> organization.contact as contact share contact, contact.name as name share name, name.family = (item.answer.value);
   src.item as item where (linkId.value = 'receiverResponse.givenName' and answer.exists()) -> organization.contact as contact share contact, contact.name as name share name, name.given = (item.answer.value);
   src.item as item where (linkId.value = 'receiverResponse.title' and answer.exists()) -> organization.contact as contact share contact, contact.name as name share name, 
                                                                        name.prefix = (item.answer.value) as prefix,
                                                                        prefix.extension as ext, ext.url = 'http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier',
                                                                        ext.value = create('code') as value, value.value='AC' "receiverResponse.title"; 
   src.item as item where (linkId.value = 'receiverResponse.phone' and answer.exists()) -> organization.telecom as value, 
                                                                                   value.system = 'phone',
                                                                                   value.value=(item.answer.value) "receiverResponse.phone"; 
   src.item as item where (linkId.value = 'receiverResponse.email' and answer.exists()) -> organization.telecom as value, 
                                                                                   value.system = 'email',
                                                                                   value.value=(item.answer.value) "receiverResponse.email"; 
   src.item as item where (linkId.value = 'receiverResponse.streetAddressLine' and answer.exists()) -> organization.address as address share orgAddress then {
     item.answer as answer -> address.line = (answer.value) "receiverResponse.streetAddressLine";
   } "item.answer";
   src.item as item where (linkId.value = 'receiverResponse.postalCode' and answer.exists()) -> organization.address as address share orgAddress, address.postalCode = (item.answer.value) "receiverResponse.postalCode";
   src.item as item where (linkId.value = 'receiverResponse.city' and answer.exists()) -> organization.address as address share orgAddress, address.city = (item.answer.value) "receiverResponse.city";
   src.item as item where (linkId.value = 'receiverResponse.country' and answer.exists()) -> organization.address as address share orgAddress, address.country = (item.answer.value) "receiverResponse.country";
}

group ExtOrfResponseReceiverOrganization(source src: BackboneElement, target organization: Organization, target ext: Extension) {
  src -> ext.url = 'http://fhir.ch/ig/ch-orf/StructureDefinition/ch-orf-responsereceiver' "url";
  src -> ext.value = create('Reference') as reference, 
                reference.type='Organization', reference.reference = ('urn:uuid:'+%organization.id) "organization";
}

group ReceiverResponse(source grp : BackboneElement, target bundle: Bundle, target composition : Composition, target serviceRequest: ServiceRequest) {
  grp.item as item where (linkId='receiverResponse' and item.where(linkId='receiverResponse.organization.name').answer.exists()) -> bundle.entry as e4, 
            e4.resource = create('Organization') as organization, 
            composition.extension as extension,
            organization.id = uuid() as uuid4,
            e4.fullUrl = append('urn:uuid:',uuid4) then {
               item then ResponseReceiverOrganizationItems(item, organization) "data";
               item then ExtOrfResponseReceiverOrganization(item, organization, extension) "extension";
            } "receiverResponseOrganization";
  grp.item as item where (linkId='receiverResponse' and item.where(linkId='receiverResponse.organization.name').answer.exists().not()) -> bundle.entry as e4, 
            e4.resource = create('Patient') as patient, 
            composition.extension as extension,
            patient.id = uuid() as uuid4,
            e4.fullUrl = append('urn:uuid:',uuid4) then {
               item then ResponseReceiverPatientItems(item, patient) "data";
               item then ExtOrfResponseReceiverPatient(item, patient, extension) "extension";
            } "receiverResponsePatient";
}

group QrToBundle(source qr : QuestionnaireResponse, target patient : Patient, target questionnaireresp: QuestionnaireResponse, target servicerequest: ServiceRequest, target composition : Composition, target bundle : Bundle) {
  qr -> bundle.id = uuid() "id";
  qr -> bundle.type = 'document' "type";
  qr then OrfComposition(qr, composition, patient, questionnaireresp, servicerequest, bundle) "composition";
  qr then QrToGroups(qr, patient, bundle, composition, servicerequest) "qrgroups";
}

group OrfComposition(source qr : QuestionnaireResponse, target tgt : Composition, target patient: Patient, target questionnaireresp: QuestionnaireResponse, target servicerequest: ServiceRequest, target bundle : Bundle) {
  qr -> tgt.status = 'final' "status";
  qr -> tgt.subject = create('Reference') as reference, reference.type='Patient', reference.reference = ('urn:uuid:'+%patient.id) "subject";
  qr -> tgt.section as tgtSection, tgtSection.entry = create('Reference') as reference, reference.type='QuestionnaireResponse', reference.reference = ('urn:uuid:'+%questionnaireresp.id),
                                   tgtSection.entry = create('Reference') as reference, reference.type='ServiceRequest', reference.reference = ('urn:uuid:'+%servicerequest.id) "sections";
  qr -> servicerequest.status = 'active',
      servicerequest.intent = 'original-order',
      servicerequest.subject = create('Reference') as reference, reference.type='Patient', reference.reference = ('urn:uuid:'+%patient.id) "servicerequest";
}